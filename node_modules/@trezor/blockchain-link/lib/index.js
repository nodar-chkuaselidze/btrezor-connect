"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var errors_1 = require("./constants/errors");
var constants_1 = require("./constants");
var deferred_1 = require("./utils/deferred");
var workerWrapper = function (factory) {
    if (typeof factory === 'function')
        return factory();
    if (typeof factory === 'string' && typeof Worker !== 'undefined')
        return new Worker(factory);
    throw new errors_1.CustomError('worker_not_found');
};
var initWorker = function (settings) { return __awaiter(void 0, void 0, void 0, function () {
    var dfd, worker, timeout;
    return __generator(this, function (_a) {
        dfd = deferred_1.create(-1);
        worker = workerWrapper(settings.worker);
        if (typeof worker !== 'object' || typeof worker.postMessage !== 'function') {
            throw new errors_1.CustomError('worker_invalid');
        }
        timeout = setTimeout(function () {
            worker.onmessage = null;
            worker.onerror = null;
            dfd.reject(new errors_1.CustomError('worker_timeout'));
        }, settings.timeout || 30000);
        worker.onmessage = function (message) {
            if (message.data.type !== constants_1.MESSAGES.HANDSHAKE)
                return;
            clearTimeout(timeout);
            delete settings.worker;
            worker.postMessage({
                type: constants_1.MESSAGES.HANDSHAKE,
                settings: settings,
            });
            dfd.resolve(worker);
        };
        worker.onerror = function (error) {
            clearTimeout(timeout);
            worker.onmessage = null;
            worker.onerror = null;
            try {
                worker.terminate();
            }
            catch (error) {
            }
            delete settings.worker;
            var message = error.message
                ? "Worker runtime error: Line " + error.lineno + " in " + error.filename + ": " + error.message
                : 'Worker handshake error';
            dfd.reject(new errors_1.CustomError('worker_runtime', message));
        };
        return [2, dfd.promise];
    });
}); };
var BlockchainLink = (function (_super) {
    __extends(BlockchainLink, _super);
    function BlockchainLink(settings) {
        var _this = _super.call(this) || this;
        _this.messageId = 0;
        _this.deferred = [];
        _this.onMessage = function (event) {
            if (!event.data)
                return;
            var data = event.data;
            if (data.id === -1) {
                _this.onEvent(data);
                return;
            }
            var dfd = _this.deferred.find(function (d) { return d.id === data.id; });
            if (!dfd) {
                return;
            }
            if (data.type === constants_1.RESPONSES.ERROR) {
                dfd.reject(new errors_1.CustomError(data.payload.code, data.payload.message));
            }
            else {
                dfd.resolve(data.payload);
            }
            _this.deferred = _this.deferred.filter(function (d) { return d !== dfd; });
        };
        _this.onEvent = function (data) {
            if (data.type === constants_1.RESPONSES.CONNECTED) {
                _this.emit('connected');
            }
            if (data.type === constants_1.RESPONSES.DISCONNECTED) {
                _this.emit('disconnected');
            }
            if (data.type === constants_1.RESPONSES.NOTIFICATION) {
                _this.emit(data.payload.type, data.payload.payload);
            }
        };
        _this.onError = function (error) {
            var message = error.message
                ? "Worker runtime error: Line " + error.lineno + " in " + error.filename + ": " + error.message
                : 'Worker handshake error';
            var e = new errors_1.CustomError('worker_runtime', message);
            _this.deferred.forEach(function (d) {
                d.reject(e);
            });
            _this.deferred = [];
        };
        _this.settings = settings;
        return _this;
    }
    BlockchainLink.prototype.getWorker = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this.worker) return [3, 2];
                        _a = this;
                        return [4, initWorker(this.settings)];
                    case 1:
                        _a.worker = _b.sent();
                        this.worker.onmessage = this.onMessage.bind(this);
                        this.worker.onerror = this.onError.bind(this);
                        _b.label = 2;
                    case 2: return [2, this.worker];
                }
            });
        });
    };
    BlockchainLink.prototype.sendMessage = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            var worker, dfd;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getWorker()];
                    case 1:
                        worker = _a.sent();
                        dfd = deferred_1.create(this.messageId);
                        this.deferred.push(dfd);
                        worker.postMessage(__assign({ id: this.messageId }, message));
                        this.messageId++;
                        return [2, dfd.promise];
                }
            });
        });
    };
    BlockchainLink.prototype.connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.CONNECT,
                    })];
            });
        });
    };
    BlockchainLink.prototype.getInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.GET_INFO,
                    })];
            });
        });
    };
    BlockchainLink.prototype.getBlockHash = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.GET_BLOCK_HASH,
                        payload: payload,
                    })];
            });
        });
    };
    BlockchainLink.prototype.getAccountInfo = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.GET_ACCOUNT_INFO,
                        payload: payload,
                    })];
            });
        });
    };
    BlockchainLink.prototype.getAccountUtxo = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.GET_ACCOUNT_UTXO,
                        payload: payload,
                    })];
            });
        });
    };
    BlockchainLink.prototype.getTransaction = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.GET_TRANSACTION,
                        payload: payload,
                    })];
            });
        });
    };
    BlockchainLink.prototype.estimateFee = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.ESTIMATE_FEE,
                        payload: payload,
                    })];
            });
        });
    };
    BlockchainLink.prototype.subscribe = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.SUBSCRIBE,
                        payload: payload,
                    })];
            });
        });
    };
    BlockchainLink.prototype.unsubscribe = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.UNSUBSCRIBE,
                        payload: payload,
                    })];
            });
        });
    };
    BlockchainLink.prototype.pushTransaction = function (payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.PUSH_TRANSACTION,
                        payload: payload,
                    })];
            });
        });
    };
    BlockchainLink.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.worker)
                    return [2, true];
                return [2, this.sendMessage({
                        type: constants_1.MESSAGES.DISCONNECT,
                    })];
            });
        });
    };
    BlockchainLink.prototype.dispose = function () {
        this.removeAllListeners();
        var worker = this.worker;
        if (worker) {
            worker.terminate();
            delete this.worker;
        }
    };
    return BlockchainLink;
}(events_1.EventEmitter));
exports.default = BlockchainLink;
