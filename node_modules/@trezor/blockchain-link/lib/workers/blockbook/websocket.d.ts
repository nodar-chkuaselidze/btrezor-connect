/// <reference types="node" />
import WebSocket from 'ws';
import { EventEmitter } from 'events';
import { Deferred } from '../../utils/deferred';
import { AccountInfoParams, EstimateFeeParams, Send } from '../../types/blockbook';
interface Subscription {
    id: string;
    type: 'notification' | 'block';
    callback: (result: any) => void;
}
interface Options {
    url: string;
    timeout?: number;
    pingTimeout?: number;
    keepAlive?: boolean;
}
export default class Socket extends EventEmitter {
    options: Options;
    ws: WebSocket | undefined;
    messageID: number;
    messages: Deferred<any>[];
    subscriptions: Subscription[];
    pingTimeout: ReturnType<typeof setTimeout> | undefined;
    connectionTimeout: ReturnType<typeof setTimeout> | undefined;
    constructor(options: Options);
    setConnectionTimeout(): void;
    clearConnectionTimeout(): void;
    setPingTimeout(): void;
    onTimeout(): void;
    onPing(): Promise<void>;
    onError(): void;
    send: Send;
    onmessage(message: string): void;
    connect(): Promise<void>;
    init(): void;
    disconnect(): void;
    isConnected(): boolean | undefined;
    getServerInfo(): Promise<import("../../types/blockbook").ServerInfo>;
    getBlockHash(block: number): Promise<import("../../types/blockbook").BlockHash>;
    getAccountInfo(payload: AccountInfoParams): Promise<import("../../types/blockbook").AccountInfo>;
    getAccountUtxo(descriptor: string): Promise<{
        txid: string;
        vout: number;
        value: string;
        height: number;
        address: string;
        path: string;
        confirmations: number;
        coinbase?: boolean | undefined;
    }[]>;
    getTransaction(txid: string): Promise<import("../../types/blockbook").Transaction>;
    pushTransaction(hex: string): Promise<import("../../types/blockbook").Push>;
    estimateFee(payload: EstimateFeeParams): Promise<{
        feePerUnit: string;
        feePerTx?: string | undefined;
        feeLimit?: string | undefined;
    }[]>;
    subscribeAddresses(addresses: string[]): Promise<import("../../types/blockbook").Subscribe>;
    unsubscribeAddresses(): Promise<import("../../types/blockbook").Subscribe> | {
        subscribed: boolean;
    };
    subscribeBlock(): Promise<import("../../types/blockbook").Subscribe>;
    unsubscribeBlock(): Promise<import("../../types/blockbook").Subscribe> | {
        subscribed: boolean;
    };
    dispose(): void;
}
export {};
