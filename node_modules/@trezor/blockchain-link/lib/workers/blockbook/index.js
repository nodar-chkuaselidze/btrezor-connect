"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("../../constants/errors");
var constants_1 = require("../../constants");
var websocket_1 = __importDefault(require("./websocket"));
var utils = __importStar(require("./utils"));
var common_1 = __importDefault(require("../common"));
var common = new common_1.default(postMessage);
var api;
var endpoints = [];
var cleanup = function () {
    if (api) {
        api.dispose();
        api.removeAllListeners();
        api = undefined;
    }
    endpoints = [];
    common.removeAccounts(common.getAccounts());
    common.removeAddresses(common.getAddresses());
    common.clearSubscriptions();
};
var connect = function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a, server, timeout, pingTimeout, keepAlive, connection, error_1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (api && api.isConnected())
                    return [2, api];
                _a = common.getSettings(), server = _a.server, timeout = _a.timeout, pingTimeout = _a.pingTimeout, keepAlive = _a.keepAlive;
                if (!server || !Array.isArray(server) || server.length < 1) {
                    throw new errors_1.CustomError('connect', 'Endpoint not set');
                }
                if (endpoints.length < 1) {
                    endpoints = common.shuffleEndpoints(server.slice(0));
                }
                common.debug('Connecting to', endpoints[0]);
                connection = new websocket_1.default({
                    url: endpoints[0],
                    timeout: timeout,
                    pingTimeout: pingTimeout,
                    keepAlive: keepAlive,
                });
                _b.label = 1;
            case 1:
                _b.trys.push([1, 3, , 4]);
                return [4, connection.connect()];
            case 2:
                _b.sent();
                api = connection;
                return [3, 4];
            case 3:
                error_1 = _b.sent();
                common.debug('Websocket connection failed');
                api = undefined;
                endpoints.splice(0, 1);
                if (endpoints.length < 1) {
                    throw new errors_1.CustomError('connect', 'All backends are down');
                }
                return [2, connect()];
            case 4:
                connection.on('disconnected', function () {
                    common.response({ id: -1, type: constants_1.RESPONSES.DISCONNECTED, payload: true });
                    cleanup();
                });
                common.response({
                    id: -1,
                    type: constants_1.RESPONSES.CONNECTED,
                });
                common.debug('Connected');
                return [2, connection];
        }
    });
}); };
var getInfo = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var socket, info, error_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                return [4, connect()];
            case 1:
                socket = _a.sent();
                return [4, socket.getServerInfo()];
            case 2:
                info = _a.sent();
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.GET_INFO,
                    payload: __assign({ url: socket.options.url }, utils.transformServerInfo(info)),
                });
                return [3, 4];
            case 3:
                error_2 = _a.sent();
                common.errorHandler({ id: data.id, error: error_2 });
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
var getBlockHash = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var socket, info, error_3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                return [4, connect()];
            case 1:
                socket = _a.sent();
                return [4, socket.getBlockHash(data.payload)];
            case 2:
                info = _a.sent();
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.GET_BLOCK_HASH,
                    payload: info.hash,
                });
                return [3, 4];
            case 3:
                error_3 = _a.sent();
                common.errorHandler({ id: data.id, error: error_3 });
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
var getAccountInfo = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, socket, info, error_4;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4, connect()];
            case 2:
                socket = _a.sent();
                return [4, socket.getAccountInfo(payload)];
            case 3:
                info = _a.sent();
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.GET_ACCOUNT_INFO,
                    payload: utils.transformAccountInfo(info),
                });
                return [3, 5];
            case 4:
                error_4 = _a.sent();
                common.errorHandler({ id: data.id, error: error_4 });
                return [3, 5];
            case 5: return [2];
        }
    });
}); };
var getAccountUtxo = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, socket, utxos, error_5;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4, connect()];
            case 2:
                socket = _a.sent();
                return [4, socket.getAccountUtxo(payload)];
            case 3:
                utxos = _a.sent();
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.GET_ACCOUNT_UTXO,
                    payload: utils.transformAccountUtxo(utxos),
                });
                return [3, 5];
            case 4:
                error_5 = _a.sent();
                common.errorHandler({ id: data.id, error: error_5 });
                return [3, 5];
            case 5: return [2];
        }
    });
}); };
var getTransaction = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, socket, tx, error_6;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4, connect()];
            case 2:
                socket = _a.sent();
                return [4, socket.getTransaction(payload)];
            case 3:
                tx = _a.sent();
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.GET_TRANSACTION,
                    payload: {
                        type: 'blockbook',
                        tx: tx,
                    },
                });
                return [3, 5];
            case 4:
                error_6 = _a.sent();
                common.errorHandler({ id: data.id, error: error_6 });
                return [3, 5];
            case 5: return [2];
        }
    });
}); };
var pushTransaction = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var socket, resp, error_7;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                return [4, connect()];
            case 1:
                socket = _a.sent();
                return [4, socket.pushTransaction(data.payload)];
            case 2:
                resp = _a.sent();
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.PUSH_TRANSACTION,
                    payload: resp.result,
                });
                return [3, 4];
            case 3:
                error_7 = _a.sent();
                common.errorHandler({ id: data.id, error: error_7 });
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
var estimateFee = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var socket, resp, error_8;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                return [4, connect()];
            case 1:
                socket = _a.sent();
                return [4, socket.estimateFee(data.payload)];
            case 2:
                resp = _a.sent();
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.ESTIMATE_FEE,
                    payload: resp,
                });
                return [3, 4];
            case 3:
                error_8 = _a.sent();
                common.errorHandler({ id: data.id, error: error_8 });
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
var onNewBlock = function (event) {
    common.response({
        id: -1,
        type: constants_1.RESPONSES.NOTIFICATION,
        payload: {
            type: 'block',
            payload: {
                blockHeight: event.height,
                blockHash: event.hash,
            },
        },
    });
};
var onTransaction = function (event) {
    if (!event.tx)
        return;
    var descriptor = event.address;
    var account = common.getAccount(descriptor);
    common.response({
        id: -1,
        type: constants_1.RESPONSES.NOTIFICATION,
        payload: {
            type: 'notification',
            payload: {
                descriptor: account ? account.descriptor : descriptor,
                tx: account
                    ? utils.transformTransaction(account.descriptor, account.addresses, event.tx)
                    : utils.transformTransaction(descriptor, undefined, event.tx),
            },
        },
    });
};
var subscribeAccounts = function (accounts) { return __awaiter(void 0, void 0, void 0, function () {
    var socket;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                common.addAccounts(accounts);
                return [4, connect()];
            case 1:
                socket = _a.sent();
                if (!common.getSubscription('notification')) {
                    socket.on('notification', onTransaction);
                    common.addSubscription('notification');
                }
                return [2, socket.subscribeAddresses(common.getAddresses())];
        }
    });
}); };
var subscribeAddresses = function (addresses) { return __awaiter(void 0, void 0, void 0, function () {
    var socket;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                common.addAddresses(addresses);
                return [4, connect()];
            case 1:
                socket = _a.sent();
                if (!common.getSubscription('notification')) {
                    socket.on('notification', onTransaction);
                    common.addSubscription('notification');
                }
                return [2, socket.subscribeAddresses(common.getAddresses())];
        }
    });
}); };
var subscribeBlock = function () { return __awaiter(void 0, void 0, void 0, function () {
    var socket;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (common.getSubscription('block'))
                    return [2, { subscribed: true }];
                return [4, connect()];
            case 1:
                socket = _a.sent();
                common.addSubscription('block');
                socket.on('block', onNewBlock);
                return [2, socket.subscribeBlock()];
        }
    });
}); };
var subscribe = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, response, error_9;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 9, , 10]);
                response = void 0;
                if (!(payload.type === 'accounts')) return [3, 3];
                return [4, subscribeAccounts(payload.accounts)];
            case 2:
                response = _a.sent();
                return [3, 8];
            case 3:
                if (!(payload.type === 'addresses')) return [3, 5];
                return [4, subscribeAddresses(payload.addresses)];
            case 4:
                response = _a.sent();
                return [3, 8];
            case 5:
                if (!(payload.type === 'block')) return [3, 7];
                return [4, subscribeBlock()];
            case 6:
                response = _a.sent();
                return [3, 8];
            case 7: throw new errors_1.CustomError('invalid_param', '+type');
            case 8:
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.SUBSCRIBE,
                    payload: response,
                });
                return [3, 10];
            case 9:
                error_9 = _a.sent();
                common.errorHandler({ id: data.id, error: error_9 });
                return [3, 10];
            case 10: return [2];
        }
    });
}); };
var unsubscribeAccounts = function (accounts) { return __awaiter(void 0, void 0, void 0, function () {
    var socket, subscribed;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                common.removeAccounts(accounts || common.getAccounts());
                return [4, connect()];
            case 1:
                socket = _a.sent();
                subscribed = common.getAddresses();
                if (subscribed.length < 1) {
                    socket.removeListener('notification', onTransaction);
                    common.removeSubscription('notification');
                    return [2, socket.unsubscribeAddresses()];
                }
                return [2, socket.subscribeAddresses(subscribed)];
        }
    });
}); };
var unsubscribeAddresses = function (addresses) { return __awaiter(void 0, void 0, void 0, function () {
    var socket, subscribed;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, connect()];
            case 1:
                socket = _a.sent();
                if (!addresses) {
                    common.removeAccounts(common.getAccounts());
                }
                subscribed = common.removeAddresses(addresses || common.getAddresses());
                if (subscribed.length < 1) {
                    socket.removeListener('notification', onTransaction);
                    common.removeSubscription('notification');
                    return [2, socket.unsubscribeAddresses()];
                }
                return [2, socket.subscribeAddresses(subscribed)];
        }
    });
}); };
var unsubscribeBlock = function () { return __awaiter(void 0, void 0, void 0, function () {
    var socket;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!common.getSubscription('block'))
                    return [2, { subscribed: false }];
                return [4, connect()];
            case 1:
                socket = _a.sent();
                socket.removeListener('block', onNewBlock);
                common.removeSubscription('block');
                return [2, socket.unsubscribeBlock()];
        }
    });
}); };
var unsubscribe = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, response, error_10;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 9, , 10]);
                response = void 0;
                if (!(payload.type === 'accounts')) return [3, 3];
                return [4, unsubscribeAccounts(payload.accounts)];
            case 2:
                response = _a.sent();
                return [3, 8];
            case 3:
                if (!(payload.type === 'addresses')) return [3, 5];
                return [4, unsubscribeAddresses(payload.addresses)];
            case 4:
                response = _a.sent();
                return [3, 8];
            case 5:
                if (!(payload.type === 'block')) return [3, 7];
                return [4, unsubscribeBlock()];
            case 6:
                response = _a.sent();
                return [3, 8];
            case 7: throw new errors_1.CustomError('invalid_param', '+type');
            case 8:
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.UNSUBSCRIBE,
                    payload: response,
                });
                return [3, 10];
            case 9:
                error_10 = _a.sent();
                common.errorHandler({ id: data.id, error: error_10 });
                return [3, 10];
            case 10: return [2];
        }
    });
}); };
var disconnect = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var error_11;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!api) {
                    common.response({ id: data.id, type: constants_1.RESPONSES.DISCONNECTED, payload: true });
                    return [2];
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, api.disconnect()];
            case 2:
                _a.sent();
                common.response({ id: data.id, type: constants_1.RESPONSES.DISCONNECTED, payload: true });
                return [3, 4];
            case 3:
                error_11 = _a.sent();
                common.errorHandler({ id: data.id, error: error_11 });
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
onmessage = function (event) {
    if (!event.data)
        return;
    var data = event.data;
    var id = data.id, type = data.type;
    common.debug('onmessage', data);
    switch (data.type) {
        case constants_1.MESSAGES.HANDSHAKE:
            common.setSettings(data.settings);
            break;
        case constants_1.MESSAGES.CONNECT:
            connect()
                .then(function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    common.response({ id: id, type: constants_1.RESPONSES.CONNECT, payload: true });
                    return [2];
                });
            }); })
                .catch(function (error) { return common.errorHandler({ id: id, error: error }); });
            break;
        case constants_1.MESSAGES.GET_INFO:
            getInfo(data);
            break;
        case constants_1.MESSAGES.GET_BLOCK_HASH:
            getBlockHash(data);
            break;
        case constants_1.MESSAGES.GET_ACCOUNT_INFO:
            getAccountInfo(data);
            break;
        case constants_1.MESSAGES.GET_ACCOUNT_UTXO:
            getAccountUtxo(data);
            break;
        case constants_1.MESSAGES.GET_TRANSACTION:
            getTransaction(data);
            break;
        case constants_1.MESSAGES.ESTIMATE_FEE:
            estimateFee(data);
            break;
        case constants_1.MESSAGES.PUSH_TRANSACTION:
            pushTransaction(data);
            break;
        case constants_1.MESSAGES.SUBSCRIBE:
            subscribe(data);
            break;
        case constants_1.MESSAGES.UNSUBSCRIBE:
            unsubscribe(data);
            break;
        case constants_1.MESSAGES.DISCONNECT:
            disconnect(data);
            break;
        case 'terminate':
            cleanup();
            break;
        default:
            common.errorHandler({
                id: id,
                error: new errors_1.CustomError('worker_unknown_request', "+" + type),
            });
            break;
    }
};
common.handshake();
