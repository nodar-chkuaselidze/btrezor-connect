import { Transaction, TokenTransfer, TokenInfo, Address, AccountAddresses, AccountInfo } from '../../types';
import { ServerInfo, AccountInfo as BlockbookAccountInfo, Transaction as BlockbookTransaction, VinVout } from '../../types/blockbook';
import { Utxo } from '../../types/responses';
export declare const transformServerInfo: (payload: ServerInfo) => {
    name: string;
    shortcut: string;
    testnet: boolean;
    version: string;
    decimals: number;
    blockHeight: number;
    blockHash: string;
};
declare type Addresses = (Address | string)[] | string;
export declare const filterTargets: (addresses: Addresses, targets: VinVout[]) => VinVout[];
export declare const filterTokenTransfers: (addresses: Addresses, transfers: {
    from?: string | undefined;
    to?: string | undefined;
    value: string;
    token: string;
    name: string;
    symbol: string;
    decimals?: number | undefined;
}[] | undefined) => TokenTransfer[];
export declare const transformTransaction: (descriptor: string, addresses: AccountAddresses | undefined, tx: BlockbookTransaction) => Transaction;
export declare const transformTokenInfo: (tokens: (import("../../types/blockbook").XPUBAddress | import("../../types/blockbook").ERC20)[] | undefined) => TokenInfo[] | undefined;
export declare const transformAddresses: (tokens: (import("../../types/blockbook").XPUBAddress | import("../../types/blockbook").ERC20)[] | undefined) => AccountAddresses | undefined;
export declare const transformAccountInfo: (payload: BlockbookAccountInfo) => AccountInfo;
export declare const transformAccountUtxo: (payload: {
    txid: string;
    vout: number;
    value: string;
    height: number;
    address: string;
    path: string;
    confirmations: number;
    coinbase?: boolean | undefined;
}[]) => Utxo[];
export {};
