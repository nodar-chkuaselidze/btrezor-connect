"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ripple_lib_1 = require("ripple-lib");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var errors_1 = require("../../constants/errors");
var constants_1 = require("../../constants");
var utils = __importStar(require("./utils"));
var common_1 = __importDefault(require("../common"));
var common = new common_1.default(postMessage);
var rippleApi;
var pingTimeout;
var DEFAULT_TIMEOUT = 20 * 1000;
var DEFAULT_PING_TIMEOUT = 3 * 60 * 1000;
var endpoints = [];
var RESERVE = {
    BASE: '20000000',
    OWNER: '5000000',
};
var BLOCKS = {
    MIN: 0,
    MAX: 0,
};
var setPingTimeout = function () {
    if (pingTimeout) {
        clearTimeout(pingTimeout);
    }
    pingTimeout = setTimeout(onPing, common.getSettings().pingTimeout || DEFAULT_PING_TIMEOUT);
};
var onPing = function () { return __awaiter(void 0, void 0, void 0, function () {
    var error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(rippleApi && rippleApi.isConnected())) return [3, 6];
                if (!(common.hasSubscriptions() || common.getSettings().keepAlive)) return [3, 5];
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, rippleApi.getServerInfo()];
            case 2:
                _a.sent();
                return [3, 4];
            case 3:
                error_1 = _a.sent();
                common.debug("Error in timeout ping request: " + error_1);
                return [3, 4];
            case 4:
                setPingTimeout();
                return [3, 6];
            case 5:
                rippleApi.disconnect();
                _a.label = 6;
            case 6: return [2];
        }
    });
}); };
var cleanup = function () {
    if (pingTimeout) {
        clearTimeout(pingTimeout);
    }
    if (rippleApi) {
        rippleApi.removeAllListeners();
        rippleApi = undefined;
    }
    endpoints = [];
    common.removeAddresses(common.getAddresses());
    common.clearSubscriptions();
};
var connect = function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a, server, timeout, api, connectionTimeout, connection, onUnexpectedClose_1, error_2, availableBlocks, error_3, info, availableBlocks;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                if (rippleApi) {
                    if (rippleApi.isConnected())
                        return [2, rippleApi];
                }
                _a = common.getSettings(), server = _a.server, timeout = _a.timeout;
                if (!server || !Array.isArray(server) || server.length < 1) {
                    throw new errors_1.CustomError('connect', 'Endpoint not set');
                }
                if (endpoints.length < 1) {
                    endpoints = common.shuffleEndpoints(server.slice(0));
                }
                common.debug('Connecting to', endpoints[0]);
                connectionTimeout = setTimeout(function () {
                    api.disconnect();
                }, timeout || DEFAULT_TIMEOUT);
                _b.label = 1;
            case 1:
                _b.trys.push([1, 3, , 4]);
                api = new ripple_lib_1.RippleAPI({ server: endpoints[0], timeout: timeout || DEFAULT_TIMEOUT });
                connection = api.connection;
                connection._retryConnect = function () { return new Promise(function () { }); };
                onUnexpectedClose_1 = connection._onUnexpectedClose.bind(connection);
                connection._onUnexpectedClose = function (_beforeOpen, resolve, reject, code) {
                    return onUnexpectedClose_1(false, resolve, reject, code);
                };
                return [4, api.connect()];
            case 2:
                _b.sent();
                return [3, 4];
            case 3:
                error_2 = _b.sent();
                clearTimeout(connectionTimeout);
                common.debug('Websocket connection failed');
                rippleApi = undefined;
                endpoints.splice(0, 1);
                if (endpoints.length < 1) {
                    throw new errors_1.CustomError('connect', 'All backends are down');
                }
                return [2, connect()];
            case 4:
                clearTimeout(connectionTimeout);
                api.on('ledger', function (ledger) {
                    RESERVE.BASE = api.xrpToDrops(ledger.reserveBaseXRP);
                    RESERVE.OWNER = api.xrpToDrops(ledger.reserveIncrementXRP);
                    var availableBlocks = ledger.validatedLedgerVersions.split('-');
                    BLOCKS.MIN = parseInt(availableBlocks[0], 10);
                    BLOCKS.MAX = parseInt(availableBlocks[1], 10);
                });
                api.on('disconnected', function () {
                    common.response({ id: -1, type: constants_1.RESPONSES.DISCONNECTED, payload: true });
                    cleanup();
                });
                _b.label = 5;
            case 5:
                _b.trys.push([5, 6, , 8]);
                availableBlocks = api.connection._availableLedgerVersions.serialize().split('-');
                BLOCKS.MIN = parseInt(availableBlocks[0], 10);
                BLOCKS.MAX = parseInt(availableBlocks[1], 10);
                return [3, 8];
            case 6:
                error_3 = _b.sent();
                return [4, api.getServerInfo()];
            case 7:
                info = _b.sent();
                availableBlocks = info.completeLedgers.split('-');
                BLOCKS.MIN = parseInt(availableBlocks[0], 10);
                BLOCKS.MAX = parseInt(availableBlocks[1], 10);
                return [3, 8];
            case 8:
                common.response({ id: -1, type: constants_1.RESPONSES.CONNECTED });
                rippleApi = api;
                return [2, rippleApi];
        }
    });
}); };
var getInfo = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var api, info, url, error_4;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, 4, 5]);
                return [4, connect()];
            case 1:
                api = _a.sent();
                return [4, api.getServerInfo()];
            case 2:
                info = _a.sent();
                url = api.connection._url;
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.GET_INFO,
                    payload: __assign({ url: url }, utils.transformServerInfo(info)),
                });
                return [3, 5];
            case 3:
                error_4 = _a.sent();
                common.errorHandler({ id: data.id, error: utils.transformError(error_4) });
                return [3, 5];
            case 4:
                setPingTimeout();
                return [7];
            case 5: return [2];
        }
    });
}); };
var getMempoolAccountInfo = function (account) { return __awaiter(void 0, void 0, void 0, function () {
    var api, info;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, connect()];
            case 1:
                api = _a.sent();
                return [4, api.request('account_info', {
                        account: account,
                        ledger_index: 'current',
                        queue: true,
                    })];
            case 2:
                info = _a.sent();
                return [2, {
                        xrpBalance: info.account_data.Balance,
                        sequence: info.account_data.Sequence,
                        txs: info.queue_data ? info.queue_data.txn_count : 0,
                    }];
        }
    });
}); };
var getRawTransactionsData = function (options) { return __awaiter(void 0, void 0, void 0, function () {
    var api;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, connect()];
            case 1:
                api = _a.sent();
                return [2, api.request('account_tx', options)];
        }
    });
}); };
var getAccountInfo = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, account, api, info, ownersReserve, reserve, misc, error_5, mempoolInfo, misc, reserve, error_6, requestOptions, transactionsData, error_7;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                account = {
                    descriptor: payload.descriptor,
                    balance: '0',
                    availableBalance: '0',
                    empty: true,
                    history: {
                        total: -1,
                        unconfirmed: 0,
                        transactions: undefined,
                    },
                    misc: {
                        sequence: 0,
                        reserve: RESERVE.BASE,
                    },
                };
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4, connect()];
            case 2:
                api = _a.sent();
                return [4, api.getAccountInfo(payload.descriptor)];
            case 3:
                info = _a.sent();
                ownersReserve = info.ownerCount > 0
                    ? new bignumber_js_1.default(info.ownerCount).times(RESERVE.OWNER).toString()
                    : '0';
                reserve = new bignumber_js_1.default(RESERVE.BASE).plus(ownersReserve).toString();
                misc = {
                    sequence: info.sequence,
                    reserve: reserve,
                };
                account.misc = misc;
                account.balance = api.xrpToDrops(info.xrpBalance);
                account.availableBalance = new bignumber_js_1.default(account.balance).minus(reserve).toString();
                account.empty = false;
                return [3, 5];
            case 4:
                error_5 = _a.sent();
                if (error_5.data && error_5.data.error === 'actNotFound') {
                    common.response({
                        id: data.id,
                        type: constants_1.RESPONSES.GET_ACCOUNT_INFO,
                        payload: account,
                    });
                }
                else {
                    common.errorHandler({ id: data.id, error: utils.transformError(error_5) });
                }
                return [2];
            case 5:
                _a.trys.push([5, 7, , 8]);
                return [4, getMempoolAccountInfo(payload.descriptor)];
            case 6:
                mempoolInfo = _a.sent();
                misc = account.misc;
                reserve = misc && typeof misc.reserve === 'string' ? misc.reserve : RESERVE.BASE;
                account.availableBalance = new bignumber_js_1.default(mempoolInfo.xrpBalance).minus(reserve).toString();
                account.misc.sequence = mempoolInfo.sequence;
                account.history.unconfirmed = mempoolInfo.txs;
                return [3, 8];
            case 7:
                error_6 = _a.sent();
                return [3, 8];
            case 8:
                if (payload.details !== 'txs') {
                    common.response({
                        id: data.id,
                        type: constants_1.RESPONSES.GET_ACCOUNT_INFO,
                        payload: account,
                    });
                    return [2];
                }
                _a.label = 9;
            case 9:
                _a.trys.push([9, 11, , 12]);
                requestOptions = {
                    account: payload.descriptor,
                    ledger_index_min: payload.from ? Math.max(payload.from, BLOCKS.MIN) : BLOCKS.MIN,
                    ledger_index_max: payload.to ? Math.max(payload.to, BLOCKS.MAX) : undefined,
                    limit: payload.pageSize || 25,
                    marker: payload.marker,
                };
                return [4, getRawTransactionsData(requestOptions)];
            case 10:
                transactionsData = _a.sent();
                account.history.transactions = transactionsData.transactions.map(function (raw) {
                    return utils.transformTransaction(payload.descriptor, raw.tx);
                });
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.GET_ACCOUNT_INFO,
                    payload: __assign(__assign({}, account), { marker: transactionsData.marker }),
                });
                return [3, 12];
            case 11:
                error_7 = _a.sent();
                common.errorHandler({ id: data.id, error: utils.transformError(error_7) });
                return [3, 12];
            case 12: return [2];
        }
    });
}); };
var getTransaction = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, api, tx, error_8;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, 5, 6]);
                return [4, connect()];
            case 2:
                api = _a.sent();
                return [4, api.getTransaction(payload, {
                        minLedgerVersion: BLOCKS.MIN,
                    })];
            case 3:
                tx = _a.sent();
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.GET_TRANSACTION,
                    payload: {
                        type: 'ripple',
                        tx: tx,
                    },
                });
                return [3, 6];
            case 4:
                error_8 = _a.sent();
                common.errorHandler({ id: data.id, error: utils.transformError(error_8) });
                return [3, 6];
            case 5:
                setPingTimeout();
                return [7];
            case 6: return [2];
        }
    });
}); };
var estimateFee = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var api, fee, drops_1, payload, error_9;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, 4, 5]);
                return [4, connect()];
            case 1:
                api = _a.sent();
                return [4, api.getFee()];
            case 2:
                fee = _a.sent();
                drops_1 = api.xrpToDrops(fee);
                if (new bignumber_js_1.default(drops_1).gt('2000')) {
                    drops_1 = '12';
                }
                payload = data.payload && Array.isArray(data.payload.blocks)
                    ? data.payload.blocks.map(function () { return ({ feePerUnit: drops_1 }); })
                    : [{ feePerUnit: drops_1 }];
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.ESTIMATE_FEE,
                    payload: payload,
                });
                return [3, 5];
            case 3:
                error_9 = _a.sent();
                common.errorHandler({ id: data.id, error: utils.transformError(error_9) });
                return [3, 5];
            case 4:
                setPingTimeout();
                return [7];
            case 5: return [2];
        }
    });
}); };
var pushTransaction = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var api, info, error_10;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, 4, 5]);
                return [4, connect()];
            case 1:
                api = _a.sent();
                return [4, api.submit(data.payload.toUpperCase())];
            case 2:
                info = _a.sent();
                if (info.resultCode === 'tesSUCCESS') {
                    common.response({
                        id: data.id,
                        type: constants_1.RESPONSES.PUSH_TRANSACTION,
                        payload: info.tx_json.hash,
                    });
                }
                else {
                    common.errorHandler({ id: data.id, error: { message: info.resultMessage } });
                    return [2];
                }
                return [3, 5];
            case 3:
                error_10 = _a.sent();
                common.errorHandler({ id: data.id, error: utils.transformError(error_10) });
                return [3, 5];
            case 4:
                setPingTimeout();
                return [7];
            case 5: return [2];
        }
    });
}); };
var onNewBlock = function (event) {
    setPingTimeout();
    common.response({
        id: -1,
        type: constants_1.RESPONSES.NOTIFICATION,
        payload: {
            type: 'block',
            payload: {
                blockHeight: event.ledgerVersion,
                blockHash: event.ledgerHash,
            },
        },
    });
};
var onTransaction = function (event) {
    setPingTimeout();
    if (event.type !== 'transaction')
        return;
    var tx = event.transaction;
    if (event.transaction.TransactionType !== 'Payment')
        return;
    var subscribed = common.getAddresses();
    var descriptor = subscribed.find(function (a) { return a === tx.Account; }) ||
        subscribed.find(function (a) { return a === tx.Destination; }) ||
        'unknown';
    common.response({
        id: -1,
        type: constants_1.RESPONSES.NOTIFICATION,
        payload: {
            type: 'notification',
            payload: {
                descriptor: descriptor,
                tx: utils.transformTransaction(descriptor, __assign(__assign({}, event), tx)),
            },
        },
    });
};
var subscribeAccounts = function (accounts) { return __awaiter(void 0, void 0, void 0, function () {
    var api, prevAddresses, uniqueAddresses;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, connect()];
            case 1:
                api = _a.sent();
                prevAddresses = common.getAddresses();
                common.addAccounts(accounts);
                uniqueAddresses = common.getAddresses().filter(function (a) { return prevAddresses.indexOf(a) < 0; });
                if (!(uniqueAddresses.length > 0)) return [3, 3];
                if (!common.getSubscription('notification')) {
                    api.connection.on('transaction', onTransaction);
                    common.addSubscription('notification');
                }
                return [4, api.request('subscribe', {
                        accounts_proposed: uniqueAddresses,
                    })];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3: return [2, { subscribed: common.getAddresses().length > 0 }];
        }
    });
}); };
var subscribeAddresses = function (addresses) { return __awaiter(void 0, void 0, void 0, function () {
    var api, uniqueAddresses, request;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, connect()];
            case 1:
                api = _a.sent();
                uniqueAddresses = common.addAddresses(addresses);
                if (!(uniqueAddresses.length > 0)) return [3, 3];
                if (!common.getSubscription('transaction')) {
                    api.connection.on('transaction', onTransaction);
                    common.addSubscription('transaction');
                }
                request = {
                    accounts_proposed: uniqueAddresses,
                };
                return [4, api.request('subscribe', request)];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3: return [2, { subscribed: common.getAddresses().length > 0 }];
        }
    });
}); };
var subscribeBlock = function () { return __awaiter(void 0, void 0, void 0, function () {
    var api;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!!common.getSubscription('ledger')) return [3, 2];
                return [4, connect()];
            case 1:
                api = _a.sent();
                api.on('ledger', onNewBlock);
                common.addSubscription('ledger');
                _a.label = 2;
            case 2: return [2, { subscribed: true }];
        }
    });
}); };
var subscribe = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, response, error_11;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 9, 10, 11]);
                response = void 0;
                if (!(payload.type === 'accounts')) return [3, 3];
                return [4, subscribeAccounts(payload.accounts)];
            case 2:
                response = _a.sent();
                return [3, 8];
            case 3:
                if (!(payload.type === 'addresses')) return [3, 5];
                return [4, subscribeAddresses(payload.addresses)];
            case 4:
                response = _a.sent();
                return [3, 8];
            case 5:
                if (!(payload.type === 'block')) return [3, 7];
                return [4, subscribeBlock()];
            case 6:
                response = _a.sent();
                return [3, 8];
            case 7: throw new errors_1.CustomError('invalid_param', '+type');
            case 8:
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.SUBSCRIBE,
                    payload: response,
                });
                return [3, 11];
            case 9:
                error_11 = _a.sent();
                common.errorHandler({ id: data.id, error: utils.transformError(error_11) });
                return [3, 11];
            case 10:
                setPingTimeout();
                return [7];
            case 11: return [2];
        }
    });
}); };
var unsubscribeAddresses = function (addresses) { return __awaiter(void 0, void 0, void 0, function () {
    var api, all;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4, connect()];
            case 1:
                api = _a.sent();
                if (!!addresses) return [3, 3];
                all = common.getAddresses();
                common.removeAccounts(common.getAccounts());
                common.removeAddresses(all);
                return [4, api.request('unsubscribe', {
                        accounts_proposed: all,
                    })];
            case 2:
                _a.sent();
                return [3, 5];
            case 3:
                common.removeAddresses(addresses);
                return [4, api.request('unsubscribe', {
                        accounts_proposed: addresses,
                    })];
            case 4:
                _a.sent();
                _a.label = 5;
            case 5:
                if (common.getAccounts().length < 1) {
                    api.connection.removeListener('transaction', onTransaction);
                    common.removeSubscription('transaction');
                }
                return [2];
        }
    });
}); };
var unsubscribeAccounts = function (accounts) { return __awaiter(void 0, void 0, void 0, function () {
    var prevAddresses, addresses, uniqueAddresses;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                prevAddresses = common.getAddresses();
                common.removeAccounts(accounts || common.getAccounts());
                addresses = common.getAddresses();
                uniqueAddresses = prevAddresses.filter(function (a) { return addresses.indexOf(a) < 0; });
                return [4, unsubscribeAddresses(uniqueAddresses)];
            case 1:
                _a.sent();
                return [2];
        }
    });
}); };
var unsubscribeBlock = function () { return __awaiter(void 0, void 0, void 0, function () {
    var api;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!common.getSubscription('ledger'))
                    return [2];
                return [4, connect()];
            case 1:
                api = _a.sent();
                api.removeListener('ledger', onNewBlock);
                common.removeSubscription('ledger');
                return [2];
        }
    });
}); };
var unsubscribe = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var payload, error_12;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                payload = data.payload;
                _a.label = 1;
            case 1:
                _a.trys.push([1, 8, 9, 10]);
                if (!(payload.type === 'accounts')) return [3, 3];
                return [4, unsubscribeAccounts(payload.accounts)];
            case 2:
                _a.sent();
                return [3, 7];
            case 3:
                if (!(payload.type === 'addresses')) return [3, 5];
                return [4, unsubscribeAddresses(payload.addresses)];
            case 4:
                _a.sent();
                return [3, 7];
            case 5:
                if (!(payload.type === 'block')) return [3, 7];
                return [4, unsubscribeBlock()];
            case 6:
                _a.sent();
                _a.label = 7;
            case 7: return [3, 10];
            case 8:
                error_12 = _a.sent();
                common.errorHandler({ id: data.id, error: utils.transformError(error_12) });
                return [2];
            case 9:
                setPingTimeout();
                return [7];
            case 10:
                common.response({
                    id: data.id,
                    type: constants_1.RESPONSES.UNSUBSCRIBE,
                    payload: { subscribed: common.getAddresses().length > 0 },
                });
                return [2];
        }
    });
}); };
var disconnect = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var error_13;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!rippleApi) {
                    common.response({ id: data.id, type: constants_1.RESPONSES.DISCONNECTED, payload: true });
                    return [2];
                }
                _a.label = 1;
            case 1:
                _a.trys.push([1, 3, , 4]);
                return [4, rippleApi.disconnect()];
            case 2:
                _a.sent();
                common.response({ id: data.id, type: constants_1.RESPONSES.DISCONNECTED, payload: true });
                return [3, 4];
            case 3:
                error_13 = _a.sent();
                common.errorHandler({ id: data.id, error: utils.transformError(error_13) });
                return [3, 4];
            case 4: return [2];
        }
    });
}); };
onmessage = function (event) {
    if (!event.data)
        return;
    var data = event.data;
    common.debug('onmessage', data);
    switch (data.type) {
        case constants_1.MESSAGES.HANDSHAKE:
            common.setSettings(data.settings);
            break;
        case constants_1.MESSAGES.CONNECT:
            connect()
                .then(function () { return __awaiter(void 0, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    common.response({ id: data.id, type: constants_1.RESPONSES.CONNECT, payload: true });
                    return [2];
                });
            }); })
                .catch(function (error) {
                return common.errorHandler({ id: data.id, error: utils.transformError(error) });
            });
            break;
        case constants_1.MESSAGES.GET_INFO:
            getInfo(data);
            break;
        case constants_1.MESSAGES.GET_ACCOUNT_INFO:
            getAccountInfo(data);
            break;
        case constants_1.MESSAGES.GET_TRANSACTION:
            getTransaction(data);
            break;
        case constants_1.MESSAGES.ESTIMATE_FEE:
            estimateFee(data);
            break;
        case constants_1.MESSAGES.PUSH_TRANSACTION:
            pushTransaction(data);
            break;
        case constants_1.MESSAGES.SUBSCRIBE:
            subscribe(data);
            break;
        case constants_1.MESSAGES.UNSUBSCRIBE:
            unsubscribe(data);
            break;
        case constants_1.MESSAGES.DISCONNECT:
            disconnect(data);
            break;
        case 'terminate':
            cleanup();
            break;
        default:
            common.errorHandler({
                id: data.id,
                error: new errors_1.CustomError('worker_unknown_request', "+" + data.type),
            });
            break;
    }
};
common.handshake();
