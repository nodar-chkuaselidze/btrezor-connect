"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deriveDateFormats = deriveDateFormats;
exports.recomputeDateFormats = recomputeDateFormats;

// Functions for date formatting
function deriveDateFormats(t, wantedOffset) {
  if (t == null) {
    return {
      timestamp: null,
      dateInfoDayFormat: null,
      dateInfoTimeFormat: null
    };
  }

  var t_ = t;
  var date = new Date((t_ - wantedOffset * 60) * 1000);
  return {
    timestamp: t_,
    dateInfoDayFormat: dateToDayFormat(date),
    dateInfoTimeFormat: dateToTimeFormat(date)
  };
}

function dateToTimeFormat(date) {
  var hh = addZero(date.getUTCHours().toString());
  var mm = addZero(date.getUTCMinutes().toString());
  var ss = addZero(date.getUTCSeconds().toString());
  return "".concat(hh, ":").concat(mm, ":").concat(ss);
}

function dateToDayFormat(date) {
  var yyyy = date.getUTCFullYear().toString();
  var mm = addZero((date.getUTCMonth() + 1).toString()); // getMonth() is zero-based

  var dd = addZero(date.getUTCDate().toString());
  return "".concat(yyyy, "-").concat(mm, "-").concat(dd);
}

function addZero(s) {
  if (s.length === 1) {
    return "0".concat(s);
  }

  return s;
}

function recomputeDateFormats(ts, wantedOffset) {
  ts.forEach(function (t) {
    var r = deriveDateFormats(t.timestamp, wantedOffset); // eslint-disable-next-line no-param-reassign

    t.dateInfoDayFormat = r.dateInfoDayFormat; // eslint-disable-next-line no-param-reassign

    t.dateInfoTimeFormat = r.dateInfoTimeFormat;
  });
}