"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkerAddressSource = exports.BrowserAddressSource = void 0;

var _utxoLib = require("@trezor/utxo-lib");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var BrowserAddressSource =
/*#__PURE__*/
function () {
  function BrowserAddressSource(hdnode, network, segwit) {
    _classCallCheck(this, BrowserAddressSource);

    this.network = network;
    this.segwit = segwit;
    this.node = hdnode;
  }

  _createClass(BrowserAddressSource, [{
    key: "derive",
    value: function derive(first, last) {
      var addresses = []; // const chainNode = HDNode.fromBase58(this.xpub, this.network).derive(this.chainId);

      for (var i = first; i <= last; i++) {
        var addressNode = this.node.derive(i);
        var naddress = '';

        if (!this.segwit) {
          naddress = addressNode.getAddress();
        } else {
          // see https://github.com/bitcoin/bips/blob/master/bip-0049.mediawiki
          // address derivation + test vectors
          var pkh = addressNode.getIdentifier();
          var scriptSig = Buffer.alloc(pkh.length + 2);
          scriptSig[0] = 0;
          scriptSig[1] = 0x14;
          pkh.copy(scriptSig, 2);

          var addressBytes = _utxoLib.crypto.hash160(scriptSig);

          naddress = _utxoLib.address.toBase58Check(addressBytes, this.network.scriptHash);
        }

        addresses.push(naddress);
      }

      return Promise.resolve(addresses);
    }
  }]);

  return BrowserAddressSource;
}();

exports.BrowserAddressSource = BrowserAddressSource;

var WorkerAddressSource =
/*#__PURE__*/
function () {
  function WorkerAddressSource(channel, node, version, segwit) {
    _classCallCheck(this, WorkerAddressSource);

    this.channel = channel;
    this.node = {
      depth: node.depth,
      child_num: node.index,
      fingerprint: node.parentFingerprint,
      chain_code: Array.prototype.slice.call(node.chainCode),
      public_key: Array.prototype.slice.call(node.keyPair.getPublicKeyBuffer())
    };
    this.version = version;
    this.segwit = segwit;
  }

  _createClass(WorkerAddressSource, [{
    key: "derive",
    value: function derive(firstIndex, lastIndex) {
      var request = {
        type: 'deriveAddressRange',
        node: this.node,
        version: this.version,
        firstIndex: firstIndex,
        lastIndex: lastIndex,
        addressFormat: this.segwit === 'p2sh' ? 1 : 0
      };
      return this.channel.postMessage(request).then(function (_ref) {
        var addresses = _ref.addresses;
        return addresses;
      });
    }
  }]);

  return WorkerAddressSource;
}();

exports.WorkerAddressSource = WorkerAddressSource;