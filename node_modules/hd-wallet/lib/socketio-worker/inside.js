"use strict";

var _socket2 = _interopRequireDefault(require("socket.io-client"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var socket;
var events = {}; // eslint-disable-next-line no-undef

onmessage = function onmessage(event) {
  var data = JSON.parse(event.data);

  if (data.type === 'init') {
    var endpoint = data.endpoint,
        connectionType = data.connectionType;
    socket = (0, _socket2["default"])(endpoint, {
      transports: [connectionType],
      reconnection: false
    });
    socket.on('connect', function () {
      return doPostMessage({
        type: 'initDone'
      });
    });
    socket.on('connect_error', function () {
      doPostMessage({
        type: 'initError'
      }); // eslint-disable-next-line no-restricted-globals,no-undef

      close();
    });
  }

  if (data.type === 'close') {
    // a hack to prevent Firefox errors in karma tests
    // it doesn't break anything - since on closing the worker,
    // no timeouts will ever happen anyway
    try {
      // eslint-disable-next-line no-global-assign,no-native-reassign
      setTimeout = function fun() {};
    } catch (e) {// intentionally empty - thread is closing anyway
    }

    if (socket) {
      socket.disconnect();
    }

    socket = null; // eslint-disable-next-line no-restricted-globals,no-undef

    close();
  }

  if (data.type === 'observe') {
    var eventFunction = function eventFunction(reply) {
      doPostMessage({
        type: 'emit',
        event: data.event,
        data: reply
      });
    };

    events[data.id] = eventFunction;

    if (socket) {
      socket.on(data.event, eventFunction);
    }
  }

  if (data.type === 'unobserve') {
    var _eventFunction = events[data.id];

    if (socket != null) {
      socket.removeListener(data.event, _eventFunction);
    }

    delete events[data.id];
  }

  if (data.type === 'subscribe') {
    if (socket) {
      var _socket;

      (_socket = socket).emit.apply(_socket, ['subscribe', data.event].concat(_toConsumableArray(data.values)));
    }
  }

  if (data.type === 'send' && socket) {
    socket.send(data.message, function (reply) {
      doPostMessage({
        type: 'sendReply',
        reply: reply,
        id: data.id
      });
    });
  }
};

function doPostMessage(data) {
  /* $FlowIssue worker postMessage missing */
  // eslint-disable-next-line no-undef
  postMessage(JSON.stringify(data));
}