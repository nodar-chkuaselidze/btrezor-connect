"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WorkerChannel = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* global Worker:false,Event:false */
// Super simple webworker interface.
// Used ONLY for the address generation;
// socket worker + discovery workers have more complicated protocols
// requires an exclusive access to worker.
// does NOT require worker to reply in a linear manner
var WorkerChannel =
/*#__PURE__*/
function () {
  function WorkerChannel(worker) {
    _classCallCheck(this, WorkerChannel);

    _defineProperty(this, "lastI", 0);

    this.worker = worker;
    this.pending = {};
    this.onMessage = this.receiveMessage.bind(this); // this.onError = this.receiveError.bind(this);

    this.open();
  }

  _createClass(WorkerChannel, [{
    key: "open",
    value: function open() {
      this.worker.onmessage = this.onMessage;
    } // this is used only for testing

  }, {
    key: "destroy",
    value: function destroy() {
      this.worker.onmessage = function () {};
    }
  }, {
    key: "postMessage",
    value: function postMessage(msg) {
      var _this = this;

      return new Promise(function (resolve) {
        _this.pending[_this.lastI] = resolve;

        _this.worker.postMessage(_objectSpread({}, msg, {
          i: _this.lastI
        }));

        _this.lastI++;
      });
    }
  }, {
    key: "receiveMessage",
    value: function receiveMessage(oevent) {
      var event = oevent;
      var i = event.data.i;
      var dfd = this.pending[i];

      if (dfd) {
        delete event.data.i;
        dfd(event.data);
        delete this.pending[i];
      } else {
        console.warn(new Error('Strange incoming message'));
      }
    }
  }]);

  return WorkerChannel;
}();

exports.WorkerChannel = WorkerChannel;