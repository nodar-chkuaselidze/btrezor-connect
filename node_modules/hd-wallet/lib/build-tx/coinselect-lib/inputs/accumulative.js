"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = accumulative;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var utils = _interopRequireWildcard(require("../utils"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// add inputs until we reach or surpass the target value (or deplete)
// worst-case: O(n)
function accumulative(utxos, outputs, feeRate, options) {
  var changeOutputLength = options.changeOutputLength,
      explicitDustThreshold = options.dustThreshold,
      inputLength = options.inputLength;
  var feeRateBigInt = utils.bignumberOrNaN(feeRate);
  if (feeRateBigInt.isNaN() || !feeRateBigInt.isInteger()) return {};
  var feeRateNumber = feeRateBigInt.toNumber();
  var bytesAccum = utils.transactionBytes([], outputs);
  var inAccum = new _bignumber["default"](0);
  var inputs = [];
  var outAccum = utils.sumOrNaN(outputs);

  for (var i = 0; i < utxos.length; ++i) {
    var utxo = utxos[i];
    var utxoBytes = utils.inputBytes(utxo);
    var utxoFee = feeRateNumber * utxoBytes;
    var utxoValue = utils.bignumberOrNaN(utxo.value); // skip detrimental input

    if (utxoValue.isNaN() || utxoValue.comparedTo(new _bignumber["default"](utxoFee)) < 0) {
      if (i === utxos.length - 1) {
        return {
          fee: (feeRateNumber * (bytesAccum + utxoBytes)).toString()
        };
      }
    } else {
      bytesAccum += utxoBytes;
      inAccum = inAccum.plus(utxoValue);
      inputs.push(utxo);
      var fee = feeRateNumber * bytesAccum;
      var outAccumWithFee = outAccum.isNaN() ? new _bignumber["default"](0) : outAccum.plus(new _bignumber["default"](fee)); // go again?

      if (inAccum.comparedTo(outAccumWithFee) >= 0) {
        return utils.finalize(inputs, outputs, feeRateNumber, inputLength, changeOutputLength, explicitDustThreshold);
      }
    }
  }

  return {
    fee: (feeRateNumber * bytesAccum).toString()
  };
}