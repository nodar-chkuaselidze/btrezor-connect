"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _accumulative = _interopRequireDefault(require("./inputs/accumulative"));

var _bnb = _interopRequireDefault(require("./inputs/bnb"));

var sorts = _interopRequireWildcard(require("./sorts"));

var utils = _interopRequireWildcard(require("./utils"));

var _tryconfirmed = _interopRequireDefault(require("./tryconfirmed"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// I am using coinselect like this; the end-goal is, however, to merge all the changes
// back into the upstream and use coinselect from npm
function _default(inputs, outputs, feeRate, options) {
  var sortedInputs = inputs.sort(sorts.score(feeRate));
  var algorithm = (0, _tryconfirmed["default"])(utils.anyOf([(0, _bnb["default"])(0.5), _accumulative["default"]]), options);
  return algorithm(sortedInputs, outputs, feeRate, options);
}