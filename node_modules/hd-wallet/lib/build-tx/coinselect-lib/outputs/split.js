"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = split;

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var utils = _interopRequireWildcard(require("../utils"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function filterCoinbase(utxos, minConfCoinbase) {
  return utxos.filter(function (utxo) {
    if (utxo.coinbase) {
      return utxo.confirmations >= minConfCoinbase;
    }

    return true;
  });
} // split utxos between each output, ignores outputs with .value defined


function split(utxosOrig, outputs, feeRate, options) {
  var inputLength = options.inputLength,
      changeOutputLength = options.changeOutputLength,
      explicitDustThreshold = options.dustThreshold;
  var coinbase = options.coinbase || 100;
  var feeRateBigInt = utils.bignumberOrNaN(feeRate);
  if (feeRateBigInt.isNaN() || !feeRateBigInt.isInteger()) return {};
  var feeRateNumber = feeRateBigInt.toNumber();
  var utxos = filterCoinbase(utxosOrig, coinbase);
  var bytesAccum = utils.transactionBytes(utxos, outputs);
  var fee = feeRateNumber * bytesAccum;
  var FEE_RESPONSE = {
    fee: fee.toString()
  };
  if (outputs.length === 0) return FEE_RESPONSE;
  var inAccum = utils.sumOrNaN(utxos);
  if (inAccum.isNaN()) return FEE_RESPONSE;
  var outAccum = utils.sumOrNaN(outputs, true);
  var remaining = inAccum.minus(outAccum).minus(new _bignumber["default"](fee));
  if (remaining.comparedTo(new _bignumber["default"](0)) < 0) return FEE_RESPONSE;
  var unspecified = outputs.reduce(function (a, x) {
    return a + (utils.bignumberOrNaN(x.value).isNaN() ? 1 : 0);
  }, 0);

  if (remaining.toString() === '0' && unspecified === 0) {
    return utils.finalize(utxos, outputs, feeRateNumber, inputLength, changeOutputLength);
  } // this is the same as "unspecified"
  // const splitOutputsCount = outputs.reduce((a, x) => a + !Number.isFinite(x.value), 0);


  var splitValue = remaining.div(new _bignumber["default"](unspecified));
  var dustThreshold = utils.dustThreshold(feeRateNumber, inputLength, changeOutputLength, explicitDustThreshold); // ensure every output is either user defined, or over the threshold

  if (!outputs.every(function (x) {
    return x.value !== undefined || splitValue.comparedTo(new _bignumber["default"](dustThreshold)) > 0;
  })) return FEE_RESPONSE; // assign splitValue to outputs not user defined

  var outputsSplit = outputs.map(function (x) {
    if (x.value !== undefined) return x; // not user defined, but still copy over any non-value fields

    var y = {};
    Object.keys(x).forEach(function (k) {
      y[k] = x[k];
    });
    y.value = splitValue.toString();
    return y;
  });
  return utils.finalize(utxos, outputsSplit, feeRateNumber, inputLength, changeOutputLength, explicitDustThreshold);
}