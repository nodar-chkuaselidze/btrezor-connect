"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTransaction = createTransaction;

var _utxoLib = require("@trezor/utxo-lib");

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _permutation = require("./permutation");

var coinselect = _interopRequireWildcard(require("./coinselect"));

var request = _interopRequireWildcard(require("./request"));

var _bchaddr = require("../utils/bchaddr");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function inputComparator(aHash, aVout, bHash, bVout) {
  return reverseBuffer(aHash).compare(reverseBuffer(bHash)) || aVout - bVout;
}

function outputComparator(aScript, aValue, bScript, bValue) {
  return new _bignumber["default"](aValue).comparedTo(new _bignumber["default"](bValue)) || aScript.compare(bScript);
} // types for building the transaction in trezor.js


function createTransaction(allInputs, selectedInputs, allOutputs, selectedOutputs, segwit, inputAmounts, basePath, changeId, changeAddress, network) {
  var convertedInputs = selectedInputs.map(function (input) {
    var id = input.id;
    var richInput = allInputs[id];
    return convertInput(richInput, segwit, inputAmounts, basePath);
  });
  var convertedOutputs = selectedOutputs.map(function (output, i) {
    // change is always last
    var isChange = i === allOutputs.length;
    var original = allOutputs[i]; // null if change

    if (!isChange && original.type === 'opreturn') {
      var opReturnData = original.dataHex;
      return convertOpReturnOutput(opReturnData);
    } // TODO refactor and get rid of FlowIssues everywhere
    // $FlowIssue


    var address = isChange ? changeAddress : original.address;
    var amount = output.value;
    return convertOutput(address, amount, network, basePath, changeId, isChange, segwit);
  });
  convertedInputs.sort(function (a, b) {
    return inputComparator(a.hash, a.index, b.hash, b.index);
  });

  var permutedOutputs = _permutation.Permutation.fromFunction(convertedOutputs, function (a, b) {
    var aValue = typeof a.output.value === 'string' ? a.output.value : '0';
    var bValue = typeof b.output.value === 'string' ? b.output.value : '0';
    return outputComparator(a.script, aValue, b.script, bValue);
  }).map(function (o) {
    return o.output;
  });

  return {
    inputs: convertedInputs,
    outputs: permutedOutputs
  };
}

function convertInput(utxo, segwit, inputAmounts, basePath) {
  var res = {
    hash: reverseBuffer(Buffer.from(utxo.transactionHash, 'hex')),
    index: utxo.index,
    path: basePath.concat(_toConsumableArray(utxo.addressPath)),
    segwit: segwit
  };

  if (inputAmounts) {
    return _objectSpread({}, res, {
      amount: utxo.value
    });
  }

  return res;
}

function convertOpReturnOutput(opReturnData) {
  var opReturnDataBuffer = Buffer.from(opReturnData, 'hex');
  var output = {
    opReturnData: opReturnDataBuffer
  };

  var script = _utxoLib.script.nullData.output.encode(opReturnDataBuffer);

  return {
    output: output,
    script: script
  };
}

function convertOutput(address, value, network, basePath, changeId, isChange, segwit) {
  var output = isChange ? {
    path: [].concat(_toConsumableArray(basePath), [1, changeId]),
    segwit: segwit,
    value: value
  } : {
    address: address,
    value: value
  };
  return {
    output: output,
    script: _utxoLib.address.toOutputScript((0, _bchaddr.convertCashAddress)(address), network)
  };
}

function reverseBuffer(src) {
  var buffer = Buffer.alloc(src.length);

  for (var i = 0, j = src.length - 1; i <= j; ++i, --j) {
    buffer[i] = src[j];
    buffer[j] = src[i];
  }

  return buffer;
}