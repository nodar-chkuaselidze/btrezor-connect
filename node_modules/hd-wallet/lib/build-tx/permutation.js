"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Permutation = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Helper class for permutation
var Permutation =
/*#__PURE__*/
function () {
  function Permutation(sorted, permutation) {
    _classCallCheck(this, Permutation);

    _defineProperty(this, "sorted", []);

    this.sorted = sorted;
    this._permutation = permutation;
  }

  _createClass(Permutation, [{
    key: "forEach",
    value: function forEach(f) {
      this._permutation.forEach(f);
    }
  }, {
    key: "map",
    value: function map(fun) {
      var original = this.sorted.map(fun);
      var perm = this._permutation;
      var res = new Permutation(original, perm);
      return res;
    }
  }], [{
    key: "fromFunction",
    value: function fromFunction(original, sort) {
      var range = _toConsumableArray(original.keys()); // I am "sorting range" - (0,1,2,3,...)
      // so I got the indexes and not the actual values inside


      var permutation = range.sort(function (a, b) {
        return sort(original[a], original[b]);
      });
      var res = new Permutation([], permutation);
      res.forEach(function (originalIx, newIx) {
        res.sorted[newIx] = original[originalIx];
      });
      return res;
    }
  }]);

  return Permutation;
}();

exports.Permutation = Permutation;